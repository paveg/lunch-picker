/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Lunch Picker API
 * OpenAPI spec version: 0.1.0
 */
import { createMutation } from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  MutationFunction,
} from '@tanstack/svelte-query';
import type { SearchRequest, SearchResponse } from './model';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Search for lunch spots
 */
export const postSearch = (
  searchRequest: SearchRequest,
  options?: RequestInit & { baseURL?: string }
): Promise<SearchResponse> => {
  const { baseURL = '/api', headers, ...fetchOptions } = options ?? {};

  return fetch(`${baseURL}/search`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      ...headers,
    },
    body: JSON.stringify(searchRequest),
    ...fetchOptions,
  }).then(async (response) => {
    const text = await response.text();
    let data: SearchResponse | null = null;

    if (text) {
      try {
        data = JSON.parse(text) as SearchResponse;
      } catch {
        data = null;
      }
    }

    if (!response.ok) {
      const error = new Error(`Failed to search (status ${response.status})`);
      (error as Error & { response?: Response }).response = response;
      (error as Error & { body?: string }).body = text;
      throw error;
    }

    if (!data) {
      throw new Error('Unexpected empty response body');
    }

    return data;
  });
};

export const getPostSearchMutationOptions = <TError = Error, TContext = unknown>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof postSearch>>,
    TError,
    { data: SearchRequest },
    TContext
  >;
  fetch?: RequestInit & { baseURL?: string };
}): CreateMutationOptions<
  Awaited<ReturnType<typeof postSearch>>,
  TError,
  { data: SearchRequest },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSearch>>,
    { data: SearchRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postSearch(data, fetchOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSearchMutationResult = NonNullable<Awaited<ReturnType<typeof postSearch>>>;
export type PostSearchMutationBody = SearchRequest;
export type PostSearchMutationError = Error;

/**
 * @summary Search for lunch spots
 */
export const createPostSearch = <TError = Error, TContext = unknown>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof postSearch>>,
    TError,
    { data: SearchRequest },
    TContext
  >;
  fetch?: RequestInit & { baseURL?: string };
}): CreateMutationResult<
  Awaited<ReturnType<typeof postSearch>>,
  TError,
  { data: SearchRequest },
  TContext
> => {
  const mutationOptions = getPostSearchMutationOptions(options);

  return createMutation(mutationOptions);
};
