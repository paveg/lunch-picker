/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Lunch Picker API
 * OpenAPI spec version: 0.1.0
 */
import { createMutation } from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  MutationFunction,
} from '@tanstack/svelte-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import type { SearchRequest, SearchResponse } from './model';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Search for lunch spots
 */
export const postSearch = (
  searchRequest: SearchRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SearchResponse>> => {
  return axios.post(`/search`, searchRequest, options);
};

export const getPostSearchMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof postSearch>>,
    TError,
    { data: SearchRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof postSearch>>,
  TError,
  { data: SearchRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSearch>>,
    { data: SearchRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postSearch(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSearchMutationResult = NonNullable<Awaited<ReturnType<typeof postSearch>>>;
export type PostSearchMutationBody = SearchRequest;
export type PostSearchMutationError = AxiosError<unknown>;

/**
 * @summary Search for lunch spots
 */
export const createPostSearch = <TError = AxiosError<unknown>, TContext = unknown>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof postSearch>>,
    TError,
    { data: SearchRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): CreateMutationResult<
  Awaited<ReturnType<typeof postSearch>>,
  TError,
  { data: SearchRequest },
  TContext
> => {
  const mutationOptions = getPostSearchMutationOptions(options);

  return createMutation(mutationOptions);
};
